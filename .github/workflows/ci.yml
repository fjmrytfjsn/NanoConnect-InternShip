name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  # コード品質チェック（Lint、Format、型チェック）
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install

      - name: TypeScript type check (Backend)
        run: cd backend && npm run type-check

      - name: ESLint check (Backend)
        run: cd backend && npm run lint

      - name: Prettier format check (Backend)
        run: cd backend && npm run format:check

  # バックエンドのテスト
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install

      - name: Run backend tests
        run: cd backend && npm run test

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage/
          flags: backend
          name: backend-coverage

  # バックエンドのビルド
  backend-build:
    name: Backend Build
    runs-on: ubuntu-latest
    needs: [code-quality, backend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install

      - name: Build backend
        run: cd backend && npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist/
          retention-days: 7

  # セキュリティスキャン
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm install
          cd backend && npm install

      - name: Run npm audit
        run: |
          npm audit --audit-level high
          cd backend && npm audit --audit-level high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # デプロイ（本番環境のみ）
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: backend/dist/

      - name: Deploy to production
        run: |
          echo "🚀 本番デプロイはここで実装します（WebContainerの場合は不要）"
          # 実際のデプロイ処理はここに実装

  # 通知
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [code-quality, backend-test, backend-build]
    if: always()
    
    steps:
      - name: Notify success
        if: ${{ needs.code-quality.result == 'success' && needs.backend-test.result == 'success' && needs.backend-build.result == 'success' }}
        run: echo "✅ CI/CDパイプラインが正常に完了しました"

      - name: Notify failure
        if: ${{ needs.code-quality.result == 'failure' || needs.backend-test.result == 'failure' || needs.backend-build.result == 'failure' }}
        run: |
          echo "❌ CI/CDパイプラインでエラーが発生しました"
          exit 1